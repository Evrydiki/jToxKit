!function(){var n={version:"2.0.0"};!function(n,t){n.Consumption=function(n){t.extend(!0,this,n),this.consumers={}},n.Consumption.prototype={__expects:["translateResponse"],init:function(){var e=this;t.pass(this,n.Consumption,"init"),t.each(this.consumers,function(n){t.act(n,n.init,e)})},parseResponse:function(e,s){t.pass(this,n.Consumption,"parseResponse");var o=this.translateResponse(e,s),r=this;t.each(this.consumers,function(n){t.act(n,n.afterTranslation,o,s,r)})},addConsumers:function(n,t){if("string"!=typeof t)throw{name:"Binding error",message:"Attempt to add consumer with non-string id: "+t};return this.consumers[t]=n,this},removeConsumer:function(n){return delete this.consumers[n],this},removeManyConsumers:function(n){if("function"!=typeof n)throw{name:"Enumeration error",message:"Attempt to enumerate consumers with non-function 'selector': "+n};var e=this;return t.each(this.consumers,function(t,s){n(t,s,e)&&delete e.consumers[s]}),this},enumerateConsumers:function(n,e){if("function"!=typeof n)throw{name:"Enumeration error",message:"Attempt to enumerate consumers with non-function 'selector': "+n};return t.each(this.consumers,function(t,s){n.call(t,t,s,e)}),this},getConsumer:function(n){return this.consumers[n]}}}(n,asSys),function(n,t){n.RawSolrTranslation=function(n){t.extend(!0,this,n),this.manager=null},n.RawSolrTranslation.prototype={init:function(e){t.pass(this,n.RawSolrTranslation,"init"),this.manager=e},translateResponse:function(n,e){for(var s=n.response.docs,o=0,r=s.length;o<r;++o)for(var i=s[o],a=n.expanded[i.s_uuid],u=0,c=a.docs.length;u<c;++u){var m=a.docs[u];t.each(m,function(n,t){Array.isArray(i[t])?Array.prototype.push.apply(i[t],Array.isArray(n)?n:[n]):null==i[t]&&(i[t]=[null].concat(n))})}return{entries:s,stats:t.extend({},n.stats,n.responseHeader),facets:n.facet_counts,paging:{start:n.response.start,count:n.response.docs.length,total:n.response.numFound,pageSize:parseInt(n.responseHeader.params.rows)}}}}}(n,asSys),"object"==typeof module&&module&&"object"==typeof module.exports?module.exports=n:(this.jToxKit=a$.extend({},this.jToxKit,n),"function"==typeof define&&define.amd&&define(n))}();
